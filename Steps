// 01 Install NodeJS
// 02 Install and configure Visual Studio Code
theme: Dracula
icons: Material Icon Theme
// 03 Arquitetura da aplicação
Back-end: API(Application Programing Interface) Restful

Front-end: React and React-Native

Extern Services

// 04 Criar projeto com NodeJS
 
mkdir aulas
cd aulas
mkdir backend
cd backend
npm init -y

:://inside VSCode
code.

:://express é um micro-framework
npm install express

:://create the main file of the application
index.js

// 05 Entendendo o React
Front-end: 
::Abordagem tradicional:
Browser (req)-> JS(HTML, CSS, JavaScript) (res em HTML)-> Browser

::Abordagem SPA (Single Page Application):

Browser(HTML, CSS, JavaScript) (req)->  JS (res em JSON)->  Browser

// 06 Criar projeto com React

:://npx é parecido com o npm só que instala um pacote externo sem a necessidade de instalar o pacote de forma global.
npx create-react-app frontend

cd frontend

::// 'npm start' executa um script que esta no package.json
npm start



// 07 Entendendo o React Native
::Abordagem tradicional
.ipa ou .apk ---> mobile

::Abordagem React-Native
React-Native ---> .ipa ou .apk (mobile)

:://Porque utilizar o Expo?
::é um conunto de bibliotecas para o React-Native prontos para usar aplicativos nativos do seu dispotivo mobile (camera, teclado, mapas, etc...).

::arquitetura do Expo

React-Native (apenas código JavaScript)---> Mobile

// BACK-END////////////////////////
// 08 Entendendo conceitos da aplicação back-end

::Rotas/Recursos

::Métodos HTTP
GET: Buscar/listar uma informação do back-end
POST: Criar uma informação no back-end
PUT: Alterar uma informação no back-end
DELETE: Deletar uma informação no back-end

::instalar Insominia ou Postman para testar métodos.

::Tipos de parâmetros

:Query Params: Parâmetros noemados enviados na rota após "?" (filtros e paginação)
:Route Rapams: Parâmetros utilizados para identificar recursos
:Request Body: Corpo da requisição, utilizado para criar ou alterar recursos

::Resquest & Response
Request: reponsável por guardar todos os dados/informações que vem através da requisição do usuário
Reponse: responsável por retornar a informação para o usuário

// 09 Nodemon
::nodemon reinicia a aplicação automaticamente toda vez que fazemos uma alteração no projeto.

npm install nodemon -D

script: { "start": "nodemon index.js" }

// 10 Data Base/Banco de Dados

:SQL: MySQL, SQLite, PostgresSQL, Oracle, Microsoft SQL Server, ...

::Driver: Select * from users
::Query Builder: table('users').select('*').where()

KNEX.js
npm install knex
npm install sqlite3

::NoSQL: MongoDB, CouchDB, ...

// 11 Entidades DB & Funcionalidades da aplicação
:: Entidades é tudo aquilo que será salva no banco de dados.

ONGs
Casos (incident)

:: Funcionalidades são ações que poderão ser realizadas na aplicação

Login da ONG
Logout da ONG
Cadastro de ONG
Cadastrar novos casos
Deletar casos
Listar casos específicos de uma ONG
Listar todos os casos
Entrar em contato com a ONG (whats e email)

// 12 Migrations - Criar tabelas no baco de dados

::Migrations cria um histórico das tabelas do banco de dados.

npx knex migrate:make create_ongs
::// run
npx knex migrate:latest


::// desfaz ultima tabela criada no DB
npx knex migrate:rollback

::// ver todas migrations que foram criadas
npx knex migrate:status

// 13 CORS - módulo de segurança
:: determina quem vai poder acessar a aplicação.

npm install cors


// FRONT-END////////////////////////
// 14 Limpeza da estrutura front-end

npm start

// 15 Conceitos do React

:Carrega o React e o ReactDOM
::React-Dom é a integração do React com o navegador. Dom é a arvore de elementos do html

::Render. renderiza e coloca o JS em tela

::componente é um função que retorna um HTML e pode ter uma função JV. NOTA: Todos os componentes devem começar com letra maiuscula

:: JSX (Java Script XML).. Quando o JS esta integrado no HTML.

:: Propriedades = Quase a mesma coisa que um atributo no HTML ex.: id="TITLE".

:: Estado é uma informação que vai ser mantida pelo componente, mas pode ser sobreposta por uma nova informação. Porém nunca pode ser manipulada diretamente por causa do principio de imutabilidade.

// 16 Página de Login

::Google font
:Roboto

@import url('https://fonts.googleapis.com/css?family=Roboto:400,500,700&display=swap');

::feather icons - pacote de icones
npm install react-icons


// 17 configurando Rotas
::pacote de rotas
npm install react-router-dom

// 18 Axios no frontend
::Axios é um cliente http responsável por conseguir fazer a chamadas ao API do backend e receber as respostas

npm install axios

// REACT-NATIVE//////////////////////
//19 Expo
npm install -g expo-cli
expo -h

::criar projeto
expo init mobile
cd mobile
yarn start

// 20 Rotas com React Navegations
:: Utilizado em projetos que usam o EXPO. Acesse: https://reactnavigation.org/docs/getting-started/

sudo su

npm install react-native

npm install @react-navigation/native

expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view

npm install @react-navigation/stack

expo install expo-constants

expo start


// 22 Integração com Whatsapp e  E-mail
expo install expo-mail-composer


// 23 Install AXIOS : Conexão com a API
npm install axios

useEffect é uma função que vai ser disparada toda vez que uma variável contida em um array é alterada


// 24 Valores monetários ex.: R$
npm install intl


// 25 FUNCIONALIDADES AVANÇADAS ///////

// 26 Testes

:: Celebrate é uma ferramenta de validações que integra o Joi (validação de JavaScript) com o Express.

npm install celebrate


:: TDD Test-Driven Development
:: FrameWork de teste para o node. jest
npm install jest -D
npx jest --init
(Y, 1(node), N, Y)

:: Ambiente de testes
npm install cross-env

:: Validar requisições http
npm install supertest -D


// 27 Deploy
::Heroku ou Netlify para aplicações pequenas

::DigitalOcean para aplicações razoavelmente grande


::Azure, AWS ou GCP para aplicações que crescem exponencialmente.

// 28 Estudar

:: Padrões de código: ESLint, Prettier
:: Autenticação JWT
:: Styled Components
